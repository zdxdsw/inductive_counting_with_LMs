[2024-04-02 17:35:14,903] [INFO] [real_accelerator.py:191:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2024-04-02 17:35:14,903] [INFO] [real_accelerator.py:191:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2024-04-02 17:35:14,903] [INFO] [real_accelerator.py:191:get_accelerator] Setting ds_accelerator to cuda (auto detect)
[2024-04-02 17:35:14,903] [INFO] [real_accelerator.py:191:get_accelerator] Setting ds_accelerator to cuda (auto detect)
----------- Preparing configs -----------
-------- Preparing model and tokenizer --------
------------ Preparing data ------------
num train = 11900
num val = 11900

task = parity

example data: 
### Question: What is the parity of the string "0000101011100111000100000010000100000010101101101010000100100000010101010001000111"? Output '+' if there are even number of 1s, output '-' if there are odd number of 1s.
 ### Answer: +.</s> 
------------ Preparing LoRA ------------
Total parameters: 6746812416
Trainable parameters: 8388608
response template tokens: ['▁###', '▁Answer', ':']
eval acc = 0.0297
eval acc = 0.0297
eval acc = 0.0297
eval acc = 0.0297
{'loss': 3.2051, 'learning_rate': 9.850000000000001e-05, 'epoch': 0.27}
{'loss': 0.1754, 'learning_rate': 0.0001, 'epoch': 0.54}
{'loss': 0.1746, 'learning_rate': 0.0001, 'epoch': 0.81}
eval acc = 0.4995
eval acc = 0.4995
eval acc = 0.4995
eval acc = 0.4995
{'eval_loss': 0.17370998859405518, 'eval_accuracy': 0.4994957983193277, 'eval_runtime': 102.064, 'eval_samples_per_second': 116.594, 'eval_steps_per_second': 1.822, 'epoch': 1.0}
{'loss': 0.1742, 'learning_rate': 0.0001, 'epoch': 1.08}
{'loss': 0.1741, 'learning_rate': 0.0001, 'epoch': 1.34}
{'loss': 0.1739, 'learning_rate': 0.0001, 'epoch': 1.61}
{'loss': 0.1741, 'learning_rate': 0.0001, 'epoch': 1.88}
eval acc = 0.4997
eval acc = 0.4997
eval acc = 0.4997
eval acc = 0.4997
{'eval_loss': 0.17641782760620117, 'eval_accuracy': 0.4997478991596639, 'eval_runtime': 101.4876, 'eval_samples_per_second': 117.256, 'eval_steps_per_second': 1.833, 'epoch': 2.0}
{'loss': 0.1742, 'learning_rate': 0.0001, 'epoch': 2.15}
{'loss': 0.174, 'learning_rate': 0.0001, 'epoch': 2.42}
{'loss': 0.1734, 'learning_rate': 0.0001, 'epoch': 2.69}
{'loss': 0.1742, 'learning_rate': 0.0001, 'epoch': 2.96}
eval acc = 0.4997
eval acc = 0.4997
eval acc = 0.4997
eval acc = 0.4997
{'eval_loss': 0.17447316646575928, 'eval_accuracy': 0.4997478991596639, 'eval_runtime': 101.4127, 'eval_samples_per_second': 117.342, 'eval_steps_per_second': 1.834, 'epoch': 3.0}
{'loss': 0.174, 'learning_rate': 0.0001, 'epoch': 3.23}
{'loss': 0.1738, 'learning_rate': 0.0001, 'epoch': 3.49}
{'loss': 0.1739, 'learning_rate': 0.0001, 'epoch': 3.76}
eval acc = 0.4997
eval acc = 0.4997
eval acc = 0.4997
eval acc = 0.4997
{'eval_loss': 0.17359420657157898, 'eval_accuracy': 0.4997478991596639, 'eval_runtime': 101.4785, 'eval_samples_per_second': 117.266, 'eval_steps_per_second': 1.833, 'epoch': 4.0}
{'loss': 0.1742, 'learning_rate': 0.0001, 'epoch': 4.03}
{'loss': 0.1739, 'learning_rate': 0.0001, 'epoch': 4.3}
{'loss': 0.1738, 'learning_rate': 0.0001, 'epoch': 4.57}
{'loss': 0.1739, 'learning_rate': 0.0001, 'epoch': 4.84}
eval acc = 0.5001
eval acc = 0.5001
eval acc = 0.5001
eval acc = 0.5001
{'eval_loss': 0.17402511835098267, 'eval_accuracy': 0.5000840336134453, 'eval_runtime': 101.4331, 'eval_samples_per_second': 117.319, 'eval_steps_per_second': 1.834, 'epoch': 5.0}
{'loss': 0.1737, 'learning_rate': 0.0001, 'epoch': 5.11}
{'loss': 0.1739, 'learning_rate': 0.0001, 'epoch': 5.38}
{'loss': 0.1737, 'learning_rate': 0.0001, 'epoch': 5.65}
{'loss': 0.1739, 'learning_rate': 0.0001, 'epoch': 5.91}
eval acc = 0.4993
eval acc = 0.4993
eval acc = 0.4993
eval acc = 0.4993
{'eval_loss': 0.1739150583744049, 'eval_accuracy': 0.499327731092437, 'eval_runtime': 101.4899, 'eval_samples_per_second': 117.253, 'eval_steps_per_second': 1.833, 'epoch': 6.0}
{'loss': 0.1735, 'learning_rate': 0.0001, 'epoch': 6.18}
{'loss': 0.1737, 'learning_rate': 0.0001, 'epoch': 6.45}
{'loss': 0.1736, 'learning_rate': 0.0001, 'epoch': 6.72}
{'loss': 0.1739, 'learning_rate': 0.0001, 'epoch': 6.99}
eval acc = 0.4998
eval acc = 0.4998
eval acc = 0.4998
eval acc = 0.4998
{'eval_loss': 0.17380695044994354, 'eval_accuracy': 0.4998319327731092, 'eval_runtime': 102.5271, 'eval_samples_per_second': 116.067, 'eval_steps_per_second': 1.814, 'epoch': 7.0}
{'loss': 0.174, 'learning_rate': 0.0001, 'epoch': 7.26}
{'loss': 0.1737, 'learning_rate': 0.0001, 'epoch': 7.53}
{'loss': 0.174, 'learning_rate': 0.0001, 'epoch': 7.8}
eval acc = 0.5
eval acc = 0.5
eval acc = 0.5
eval acc = 0.5
{'eval_loss': 0.17439453303813934, 'eval_accuracy': 0.5, 'eval_runtime': 101.4204, 'eval_samples_per_second': 117.333, 'eval_steps_per_second': 1.834, 'epoch': 8.0}
{'loss': 0.1737, 'learning_rate': 0.0001, 'epoch': 8.06}
{'loss': 0.1736, 'learning_rate': 0.0001, 'epoch': 8.33}
{'loss': 0.1735, 'learning_rate': 0.0001, 'epoch': 8.6}
{'loss': 0.1734, 'learning_rate': 0.0001, 'epoch': 8.87}
eval acc = 0.4977
eval acc = 0.4977
eval acc = 0.4977
eval acc = 0.4977
{'eval_loss': 0.17366619408130646, 'eval_accuracy': 0.4977310924369748, 'eval_runtime': 101.3684, 'eval_samples_per_second': 117.394, 'eval_steps_per_second': 1.835, 'epoch': 9.0}
{'loss': 0.1732, 'learning_rate': 0.0001, 'epoch': 9.14}
{'loss': 0.1732, 'learning_rate': 0.0001, 'epoch': 9.41}
{'loss': 0.1735, 'learning_rate': 0.0001, 'epoch': 9.68}
{'loss': 0.1732, 'learning_rate': 0.0001, 'epoch': 9.95}
eval acc = 0.5001
eval acc = 0.5001
eval acc = 0.5001
eval acc = 0.5001
{'eval_loss': 0.17366822063922882, 'eval_accuracy': 0.5000840336134453, 'eval_runtime': 101.3525, 'eval_samples_per_second': 117.412, 'eval_steps_per_second': 1.835, 'epoch': 10.0}
{'train_runtime': 13437.1862, 'train_samples_per_second': 8.856, 'train_steps_per_second': 0.554, 'train_loss': 0.25533190356787816, 'epoch': 10.0}
